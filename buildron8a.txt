extern void object::BUILDERTango()
{    /*
	workerDroneProtocolv1
	1. check for titanium or titanium ore,
	2. grab Titanium (grabtit function) or grab TitaniumOre and bring it to converter if none break,
	3. find flatspace with enough space to build required building, grab Titanium and drop,
	4. If available build: Converter, Bot Factory, ResearchCenter, CellFactory... ; check batteryLevel  else break loop,
	5. Feed the furnace... (CollectTitanium v 10)
	
	
	
	point start=position;
	float q;
	q=flatground(position,100);
	    //message("Promień="+q+"metrów");*/
	if (load!=null) {
		drop();
		 
	}    
	Builder(Converter);
	Builder(BotFactory);
	Builder(PowerStation);
	//BotMaker(WingedShooter);
	//Builder(ExchangePost);
	//Builder(RadarStation);
	Builder(RepairCenter);
	
	//Builder(ResearchCenter);
	//DoResearch(ResearchDefenseTower);
	//Builder(AutoLab);
	//Builder(ExchangePost);*/
	//BotMaker();
	    
	   
	  
	    
	    
}
    
void object:: BotMaker(int cat)
{
	object titaniumCube, botFactory,powerCell, recharge;
	
	titaniumCube=radar(Titanium);
	botFactory=radar(BotFactory);
	powerCell=radar(PowerCell);
	recharge=radar(PowerStation);
	if (canbuild(cat))
	{
		BatLev(0.2);
		goto(titaniumCube.position);
		grab();
		goto(botFactory.position);
		move(1);
		drop(InFront);
		move(-3);
		botFactory.factory(cat);
		wait(25);
		goto(powerCell.position);
		grab();
		if(powerCell.energyLevel!=1){
			if(PowerStation==1){
				goto(recharge.position);
				while(powerCell.energyLevel!=1){
					wait(0.1);
				}
			}
			else{
				turn(-90);
				move(15);
				drop();
				turn(180);
				move(15);
			}
		}
		goto(botFactory.position);
		drop();
		move(-2);
		turn(90);
		move(5);
		turn(-90);
		move(5);
		
		 
		message("New unit ready!" + cat, DisplayInfo);
		BatLev(0.2);    
	}else{
		message("Unit not available", DisplayInfo);
	}
	   
}
    
void checkSafeSpot()
{
	
}

void GrabTit()
{
	object item;
	item = radar(Titanium);
	
	
	if (item == null) {
		message("No TITANIUM on planet surface is left", DisplayInfo);
		wait(1);
		return;
		
	} else {
		
		
		goto(item.position);
		grab();
		BatLev(0.2);
	}
	
	
}
/*void DoResearch()

object item;

item = radar(PowerCell);

goto(item.position);
grab();

item=radar(ResearchCenter);
goto(item.position);
drop();
message("Research Station powered up!", DisplayInfo);
if(canresearch(ResearchTracked))
{
	if(researched(ResearchTracked)){return;}
	item.research(ResearchTracked);
}
if(canresearch(ResearchWinged))
{
	if(researched(ResearchWinged)){return;}
	item.research(ResearchWinged);
}
if(canresearch(ResearchShooter))
{
	if(researched(ResearchShooter)){return;}
	item.research(ResearchShooter);
}
if(canresearch(ResearchPhazerShooter))
{
	if(researched(ResearchPhazerShooter)){return;}
	item.research(ResearchPhazerShooter);
}
if(canresearch(ResearchThumper)
{
	if(researched(ResearchThumper)){return;}
	item.research(ResearchThumper);
}
if(canresearch(ResearchShielder))
{
	if(researched(ResearchShielder)){return;}
	item.research(ResearchShielder);
}
if(canresearch(ResearchDefenseTower))
{
	if(researched(ResearchDefenseTower)){return;}
	item.research(ResearchDefenseTower);
}
if(canresearch(ResearchNuclearPlant))
{
	if(researched(ResearchNuclearPlant)){return;}
	item.research(ResearchNuclearPlant);
}




 */

void object::Builder(int cat)
{ //if can build
	//grab titanium
	//calculate reuqired free space
	//find space
	//leave titanium cube
	//build
	//message me
	//check power level
	
	float reqRadius = 0;
	float availableRadius = 0;
	point buildingSite;
	int dist;
	object spot;
	object[] items = radarall(Any,360,360,0,12,FilterOnlyLanding);
	    if (canbuild(cat)){
		GrabTit();
		if (cat == BotFactory) reqRadius = 7.5;
		if (cat == ResearchCenter)  reqRadius= 5; 
		if (cat ==  RadarStation)  reqRadius= 2.5;  
		if (cat ==  ExchangePost)  reqRadius= 2.5;    
		if (cat ==  RepairCenter)   reqRadius= 6;    
		if (cat ==  DefenseTower) reqRadius= 3.5; 
		if (cat ==  AutoLab)   reqRadius= 6;           
		if (cat ==  PowerStation) reqRadius= 6;     
		if (cat ==  PowerPlant)   reqRadius= 4;      
		if (cat ==  NuclearPlant)  reqRadius= 10;    
		if (cat ==  Converter) reqRadius= 6;       
		if (cat ==  Derrick)  reqRadius= 2.5;        
		if (cat ==  PowerCaptor) reqRadius= 10;
		message(reqRadius);
		
		for (int i = 0; i < sizeof(items); ++i)
		{
			   // message(items[i].id)
			
			point units = items[i].position;
			 dist = round(distance2d(this.position, units));
			
		}
		buildingSite = flatspace ( this.position, reqRadius, 0, 200, dist );
		goto(buildingSite);
		//flatground (this.position, reqRadius);
		//message(availableRadius);
		if(cat == PowerPlant)
		{
			spot = radar(PowerSpot,360,360,0,12);
			if(spot == null)
			{
				message("no suitable spot");
				return;
			}else{
				goto(spot.position);
				build(cat);
			}
			
		}
		if(cat == Derrick)
		{
			spot = radar(TitaniumSpot,360,360,0,12);
			if(spot == null)
			{
				message("no suitable spot");
				return;
			}else{
				goto(spot.position);
				build(cat);
			}
			
		}
		if(cat == Derrick)
		{
			spot = radar(UraniumSpot,360,360,0,12);
			if(spot == null)
			{
				message("no suitable spot");
				return;
			}else{
				goto(spot.position);
				build(cat);
			}
			
		}
		
		drop();
		build(cat);
		BatLev(0.2);
		      
		    
	}
}
/*int CalculateSpaceRequired(object building)
{
	int reqRadius;
	switch (building.category)
	{
		case BotFactory: reqRadius= 7.5; break;      
		case ResearchCenter:  reqRadius= 5; break;  
		case RadarStation:   reqRadius= 2.5; break;  
		case ExchangePost:   reqRadius= 2.5; break;    
		case RepairCenter:   reqRadius= 6; break;   
		case DefenseTower: reqRadius= 3.5; break;
		case AutoLab:   reqRadius= 6; break;          
		case PowerStation: reqRadius= 6; break;     
		case PowerPlant:   reqRadius= 4; break;      
		case NuclearPlant:  reqRadius= 10; break;    
		case Converter: reqRadius= 6; break;        
		case Derrick:   reqRadius= 2.5; break;       
		case PowerCaptor: reqRadius= 10; break;
		default: message("Not on the list", DisplayError);
	}
	
	message(reqRadius);
}
*/
void object:: CreCell()
{
	    object item = radar(PowerPlant, 0, 360, 0, 1000, 1, FilterFriendly);
	if(item!=null){
		GrabTit(); 
		goto(item.position);
		    drop();
		    while(item.energyCell.category != PowerCell) wait(0.1);
		    grab();
		    goto(space(item.position));    // go to free space
		    drop();                   // drop cell
		
		
	}else{
		message("Missing Power Plant");
		return;
	} 
	 
	    
	    
}

void DoResearch(int cat)
{
	  object powerCell, recharge, resCenter;
	  powerCell=radar(PowerCell);
	  recharge=radar(PowerStation);
	  resCenter = radar(ResearchCenter, 360, 360, 0, 1000, 1, FilterFriendly);
	if(powerCell==null)
	{
		
		CreCell();
	}else
	{
		 goto(powerCell.position);
		grab();
		if(powerCell.energyLevel!=1)
		{
			if(PowerStation==1)
			{
				goto(recharge.position);
				while(powerCell.energyLevel!=1){
					wait(0.1);
				}
			}
			else{
				goto(resCenter.position);
				drop();
				turn(-90);
				move(15);
				drop();
				turn(180);
				move(15);
			}
		}
		goto(resCenter.position);
		drop();
		turn(-90);
		move(15);
		drop();
		turn(180);
		move(15);
	} 
	if(canresearch(cat)==true){
		if(researched(cat)==false){
			errmode(0);
			
			resCenter.research(cat);
			errmode(1);
			
		}else{
			message("Currently chosen research option is not available", DisplayInfo);
			return;
		}
		
	}
	
	    
	   
	    
	    /*ResearchTracked       Tracked bots (e.g. tracked grabber)
	ResearchWinged        Winged bots (e.g. winged grabber)
	ResearchShooter       Bots with cannon (e.g. tracked shooter)
	ResearchPhazerShooter Phazer shooter
	ResearchThumper       Thumper
	ResearchShielder      Shielder
	ResearchDefenseTower  Defense tower
	ResearchNuclearPlant  Nuclear plant*/
} 

void object:: BatLev(float en)
{
	object item;          
	
	if(energyCell.category==PowerCell){
		if(energyCell.energyLevel <= en);
		{
			item = radar(PowerStation); // look for station
			if(item != null){
				goto(item.position);   // go to the power station
				{
					wait(0);
				}
				while ( energyCell.energyLevel < 1 )
				{
					wait(1);            // wait until recharged
				}
				message("Recharge completed");
			}else{
				message("Warning no Power Plant available");
				object cell;
				float min = 0;
				 
				while( (cell = radar(PowerCell,0,360,min)) != null )
				{
					min = distance2d(position,cell.position) + 0.5;
					 
					if(cell.energyLevel >= 0.5)
					{
						goto(cell.position);    
						 
						message("Swapping PowerCell",DisplayInfo);
						 
						grab();   
						drop(Behind);
						 
						grab(EnergyCell);  
						drop();
						 
						grab(Behind);
						drop(EnergyCell);
						 
						return;
					}
				}
				 
				return;
			}
			
		}
		
	}else if(energyCell.category==NuclearCell){
		float batteryLevel = energyCell.energyLevel;
		point here = this.position;
		message("NuclearCell level: " + batteryLevel + "Last coordinates: " + here, DisplayInfo);
		
		return; //ignore command
	}
	
}


void object::checkTemp()
{
	boolean overheat = false;
	point safeSpot;
	if(temperature > 0.8)
	    overheat = true;
	if(temperature < 0.2)
	    overheat = false;
	
	if(overheat and topo(position) > 1)
	{
		safeSpot = flatspace ( this.position, 1, 1 );
		goto(safeSpot,5);
		jet(-1);
	}
	    
	
}




void object:: ShiLev(float en)
{
	
	
	if (shieldLevel<en)
	{
		object repStation;
		repStation=radar(RepairCenter,FilterFriendly);
		goto(repStation.position);
		{
			checkTemp();
			wait(0);
		}
		while(shieldLevel<1)
		{
			wait(0);
		}
	} 
	
	
}
