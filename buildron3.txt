extern void object::BUIDLERalpha()
{    /*
	workerDroneProtocolv1
	1. check for titanium or titanium ore,
	2. grab Titanium (grabtit function) or grab TitaniumOre and bring it to converter if none break,
	3. find flatspace with enough space to build required building, grab Titanium and drop,
	4. If available build: Converter, Bot Factory, ResearchCenter, CellFactory... ; check batteryLevel  else break loop,
	5. Feed the furnace... (CollectTitanium v 10)
	
	
	
	point start=position;
	float q;
	q=flatground(position,100);
	    //message("Promień="+q+"metrów");*/
	    
	Builder(Converter);
	Builder(BotFactory);
	Builder(ExchangePost);
	    
	   
	  
	    
	    
}
    
void BotMaker()
{
	object item;
	object bot;
	item=radar(Titanium);
	goto(item.position);
	grab();
	item=radar(BotFactory);
	goto(item.position);
	drop();
	move(-2.5);
	item.factory(TrackedGrabber);
	
	do
	{
		wait(1);              // poczekaj na kostkę tytanu
		bot = radar(TrackedGrabber, 0, 45, 0, 5);
	}
	while ( bot == null );
	item=radar(PowerCell);
	goto(item.position);
	grab();
	item=radar(TrackedGrabber);
	goto(item.position);
	drop();
	move(-3);
	message("New Grabber ready!", DisplayInfo);       
}
    


void GrabTit()
{
	object item;
	item = radar(Titanium);
	if (item == null) {
		message("No TITANIUM on planet, waiting", DisplayInfo);
		wait(1);
		
	} else {
		goto(item.position);
		grab();
	}
	
	
}
/*void DoResearch()

object item;

item = radar(PowerCell);

goto(item.position);
grab();

item=radar(ResearchCenter);
goto(item.position);
drop();
message("Research Station powered up!", DisplayInfo);
if(canresearch(ResearchTracked))
{
	if(researched(ResearchTracked)){return;}
	item.research(ResearchTracked);
}
if(canresearch(ResearchWinged))
{
	if(researched(ResearchWinged)){return;}
	item.research(ResearchWinged);
}
if(canresearch(ResearchShooter))
{
	if(researched(ResearchShooter)){return;}
	item.research(ResearchShooter);
}
if(canresearch(ResearchPhazerShooter))
{
	if(researched(ResearchPhazerShooter)){return;}
	item.research(ResearchPhazerShooter);
}
if(canresearch(ResearchThumper)
{
	if(researched(ResearchThumper)){return;}
	item.research(ResearchThumper);
}
if(canresearch(ResearchShielder))
{
	if(researched(ResearchShielder)){return;}
	item.research(ResearchShielder);
}
if(canresearch(ResearchDefenseTower))
{
	if(researched(ResearchDefenseTower)){return;}
	item.research(ResearchDefenseTower);
}
if(canresearch(ResearchNuclearPlant))
{
	if(researched(ResearchNuclearPlant)){return;}
	item.research(ResearchNuclearPlant);
}




 */

void object::Builder(int cat)
{
	    if (canbuild(cat))
	    GrabTit();
	    goto(space(this.position, 8, 50, 15));
	    drop();
	    build(cat);
}
void object:: CreCell()
{
	    GrabTit();    
	    object item = radar(PowerPlant, 0, 360, 0, 1000, 1, FilterFriendly);
	    goto(item.position);
	    drop();
	    while(item.energyCell.category != PowerCell) wait(0.1);
	    grab();
	    goto(space(this.position));    // go to free space
	    drop();                   // drop titanium
}

void DoResearch(int cat)
{
	    CreCell();
	    object item = radar(ResearchCenter, 0, 360, 0, 1000, 1, FilterFriendly);
	    goto(item.position);
	    drop();
	
	
	    if(canresearch(cat)&&(researched(cat)==false))
	{
		item.research(cat);
	}
	    
	    /*ResearchTracked       Tracked bots (e.g. tracked grabber)
	ResearchWinged        Winged bots (e.g. winged grabber)
	ResearchShooter       Bots with cannon (e.g. tracked shooter)
	ResearchPhazerShooter Phazer shooter
	ResearchThumper       Thumper
	ResearchShielder      Shielder
	ResearchDefenseTower  Defense tower
	ResearchNuclearPlant  Nuclear plant*/
}   
